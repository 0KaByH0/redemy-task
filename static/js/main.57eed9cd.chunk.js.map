{"version":3,"sources":["Editor.js","App.js","index.js"],"names":["setCaretToEnd","element","range","document","createRange","selection","window","getSelection","selectNodeContents","collapse","removeAllRanges","addRange","focus","deletEmpty","div","Array","from","children","map","el","innerHTML","removeChild","Editor","color","fontSize","editor","React","useRef","useState","setInput","useEffect","current","p","createElement","classList","add","appendChild","ref","contentEditable","role","spellCheck","onFocus","e","console","log","onKeyDown","lastChild","localName","nativeEvent","key","handleChange","style","border","width","height","display","outline","userSelect","whiteSpace","overflowWrap","App","setFontSize","setColor","EditButton","props","onClick","onMouseDown","evt","preventDefault","toString","wrappedselection","execCommand","label","name","className","flexDirection","alignItems","prev","prevcolor","colors","Math","floor","random","length","changeColor","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.57eed9cd.chunk.js","sourcesContent":["import React from 'react';\r\n\r\n// const content = [\r\n//   { text: 'asdfxc', fontSize: 12, color: 'red' },\r\n//   { text: 'wd', fontSize: 14, color: 'dark' },\r\n//   { text: 'cdse', fontSize: 12, color: 'blue' },\r\n//   { text: 'asdfxzc', fontSize: 16, color: 'red' },\r\n//   { text: 's', fontSize: 12, color: 'red' },\r\n// ];\r\n\r\nconst Editor = ({ color, fontSize }) => {\r\n  const editor = React.useRef(null);\r\n  const [input, setInput] = React.useState('');\r\n\r\n  React.useEffect(() => {\r\n    deletEmpty(editor.current);\r\n    let p = document.createElement('p');\r\n    p.classList.add(`${color}`, `f${fontSize}`);\r\n    p.innerHTML = ' ';\r\n    editor.current.appendChild(p);\r\n    setCaretToEnd(p);\r\n  }, [color, fontSize]);\r\n\r\n  const handleChange = (e) => {\r\n    if (editor.current.lastChild.localName === 'br') {\r\n      editor.current.removeChild(editor.current.lastChild);\r\n    }\r\n\r\n    if (e.nativeEvent.key === 'Enter') {\r\n      let p = document.createElement('p');\r\n      p.classList.add(`${color}`, `f${fontSize}`);\r\n      p.innerHTML = ' ';\r\n      editor.current.appendChild(p);\r\n    }\r\n    setInput(e.nativeEvent.key);\r\n  };\r\n\r\n  return (\r\n    <div\r\n      ref={editor}\r\n      contentEditable=\"true\"\r\n      role=\"textbox\"\r\n      spellCheck=\"true\"\r\n      onFocus={(e) => console.log(e)}\r\n      onKeyDown={(e) => handleChange(e)}\r\n      style={{\r\n        border: '2px solid black',\r\n        width: '500px',\r\n        height: '400px',\r\n        display: 'inline-block',\r\n        outline: 'none',\r\n        userSelect: 'text',\r\n        whiteSpace: 'pre-wrap',\r\n        overflowWrap: 'break-word',\r\n      }}></div>\r\n  );\r\n};\r\n\r\n// function attachSelectionListener(element) {\r\n//   if (!element.contentEditable) {\r\n//     return;\r\n//   }\r\n//   element.onselectstart = () => handleSelectionChange(element);\r\n// }\r\n\r\n// function handleSelectionChange(element) {\r\n//   document.onmouseup = () => retrieveSelection(element);\r\n//   document.onkeyup = () => retrieveSelection(element);\r\n// }\r\n\r\n// function retrieveSelection(element) {\r\n//   const selection = document.getSelection();\r\n\r\n//   // Ignore empty selection\r\n//   if (!selection || !selection.toString()) {\r\n//     return;\r\n//   }\r\n//   console.log(selection.toString());\r\n// }\r\n\r\nconst setCaretToEnd = (element) => {\r\n  const range = document.createRange();\r\n  const selection = window.getSelection();\r\n  range.selectNodeContents(element);\r\n  range.collapse(false);\r\n  selection.removeAllRanges();\r\n  selection.addRange(range);\r\n  element.focus();\r\n};\r\n\r\nconst deletEmpty = (div) => {\r\n  Array.from(div.children).map((el) =>\r\n    el.innerHTML === ' ' || el.innerHTML === '' ? div.removeChild(el) : el,\r\n  );\r\n};\r\n\r\nexport default Editor;\r\n","import React from 'react';\nimport Editor from './Editor';\n\nimport './styles.css';\n\nconst changeColor = () => {\n  const colors = ['red', 'blue', 'green', 'black', 'pink'];\n  const ind = Math.floor(Math.random() * colors.length);\n  return colors[ind];\n};\n\nfunction App() {\n  const [fontSize, setFontSize] = React.useState(14);\n  const [color, setColor] = React.useState('green');\n\n  const EditButton = (props) => {\n    return (\n      <button\n        onClick={props.onClick}\n        key={props.name}\n        onMouseDown={(evt) => {\n          evt.preventDefault();\n          if (color && fontSize) {\n            const selection = window.getSelection().toString();\n            const wrappedselection = `<p class=\"${color + ' f' + fontSize}\">${selection}</p>`;\n            console.log(selection, wrappedselection);\n            document.execCommand('insertHTML', false, wrappedselection);\n          }\n        }}>\n        {props.label}\n      </button>\n    );\n  };\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">Rich Text Editor Example</header>\n      <nav>\n        <div style={{ display: 'flex', flexDirection: 'row', alignItems: 'center' }}>\n          <div>\n            <EditButton\n              onClick={() => setFontSize((prev) => (prev >= 20 ? prev : prev + 2))}\n              label=\"Add font size\"\n              color={(prevcolor) => prevcolor}\n              fontSize={fontSize}\n            />\n            <h2>{fontSize}</h2>\n            <EditButton\n              onClick={() => setFontSize((prev) => (prev <= 8 ? prev : prev - 2))}\n              label=\"Remove font size\"\n              color={color}\n              fontSize={fontSize}\n            />\n          </div>\n          <div>\n            <EditButton\n              onClick={() => setColor(changeColor())}\n              label=\"Change Color\"\n              color={color}\n              fontSize={fontSize}\n            />\n            <h2>{color}</h2>\n          </div>\n        </div>\n      </nav>\n      <Editor color={color} fontSize={fontSize} />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}