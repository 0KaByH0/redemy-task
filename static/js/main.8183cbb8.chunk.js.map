{"version":3,"sources":["Editor.js","App.js","index.js"],"names":["setCaretToEnd","element","range","document","createRange","selection","window","getSelection","selectNodeContents","collapse","removeAllRanges","addRange","focus","deletEmpty","div","Array","from","children","map","el","innerHTML","removeChild","Editor","color","fontSize","bg","editor","React","useRef","useState","setInput","useEffect","current","p","createElement","classList","add","appendChild","ref","contentEditable","role","spellCheck","onFocus","e","console","log","onKeyDown","t","localName","nativeEvent","key","handleChange","style","border","width","height","display","outline","userSelect","whiteSpace","overflowWrap","marginLeft","App","setFontSize","setColor","setBg","EditButton","props","onClick","onMouseDown","evt","preventDefault","toString","wrappedselection","execCommand","label","name","className","flexDirection","alignItems","justifyContent","prev","ReactDOM","render","getElementById"],"mappings":"+LAwFMA,EAAgB,SAACC,GACrB,IAAMC,EAAQC,SAASC,cACjBC,EAAYC,OAAOC,eACzBL,EAAMM,mBAAmBP,GACzBC,EAAMO,UAAS,GACfJ,EAAUK,kBACVL,EAAUM,SAAST,GACnBD,EAAQW,SAGJC,EAAa,SAACC,GAClBC,MAAMC,KAAKF,EAAIG,UAAUC,KAAI,SAACC,GAAD,MACV,MAAjBA,EAAGC,WAAsC,KAAjBD,EAAGC,UAAmBN,EAAIO,YAAYF,GAAMA,MAIzDG,EA9FA,SAAC,GAA6B,IAA3BC,EAA0B,EAA1BA,MAAOC,EAAmB,EAAnBA,SAAUC,EAAS,EAATA,GAC3BC,EAASC,IAAMC,OAAO,MAC5B,EAA0BD,IAAME,SAAS,IAAzC,mBAAcC,GAAd,WAEAH,IAAMI,WAAU,WACdlB,EAAWa,EAAOM,SAClB,IAAIC,EAAI9B,SAAS+B,cAAc,KAC/BD,EAAEE,UAAUC,IAAZ,UAAmBb,GAAnB,WAAgCC,GAAhC,aAAkDC,IAClDQ,EAAEb,UAAY,IACdM,EAAOM,QAAQK,YAAYJ,GAC3BjC,EAAciC,KACb,CAACV,EAAOC,EAAUC,IAuBrB,OACE,qBACEa,IAAKZ,EACLa,gBAAgB,OAChBC,KAAK,UACLC,WAAW,OACXC,QAAS,SAACC,GAAD,OAAOC,QAAQC,IAAIF,IAC5BG,UAAW,SAACH,GAAD,OA5BM,SAACA,GAAO,IAAD,IACtBI,EAAIhC,MAAMC,KAAKU,EAAOM,QAAQf,UAAUC,KAAI,SAACC,GAAD,OAAQA,KAExD,GADAyB,QAAQC,MACgB,UAApB,UAAAE,EAAE,UAAF,eAAMC,YAA4C,QAApB,UAAAD,EAAE,UAAF,eAAMC,WAAoB,CAC1D,IAAIf,EAAI9B,SAAS+B,cAAc,KAC/BD,EAAEE,UAAUC,IAAZ,UAAmBb,GAAnB,WAAgCC,GAAhC,aAAkDC,IAClDQ,EAAEb,UAAY,IACdM,EAAOM,QAAQK,YAAYJ,GAC3BjC,EAAciC,GACdP,EAAOM,QAAQX,YAAY0B,EAAE,IAG/B,GAA0B,UAAtBJ,EAAEM,YAAYC,IAAiB,CACjC,IAAIjB,EAAI9B,SAAS+B,cAAc,KAC/BD,EAAEE,UAAUC,IAAZ,UAAmBb,GAAnB,WAAgCC,GAAhC,aAAkDC,IAClDQ,EAAEb,UAAY,IACdM,EAAOM,QAAQK,YAAYJ,GAE7BH,EAASa,EAAEM,YAAYC,KAUHC,CAAaR,IAC/BS,MAAO,CACLC,OAAQ,kBACRC,MAAO,QACPC,OAAQ,QACRC,QAAS,eACTC,QAAS,OACTC,WAAY,OACZC,WAAY,WACZC,aAAc,aACdC,WAAY,U,MCsFLC,MA/If,WACE,MAAgCnC,IAAME,SAAS,IAA/C,mBAAOL,EAAP,KAAiBuC,EAAjB,KACA,EAA0BpC,IAAME,SAAS,SAAzC,mBAAON,EAAP,KAAcyC,EAAd,KACA,EAAoBrC,IAAME,SAAS,SAAnC,mBAAOJ,EAAP,KAAWwC,EAAX,KAEMC,EAAa,SAACC,GAClB,OACE,wBACEC,QAASD,EAAMC,QAEfC,YAAa,SAACC,GAEZ,GADAA,EAAIC,iBACAJ,EAAM5C,OAAS4C,EAAM3C,SAAU,CACjC,IAAMnB,EAAYC,OAAOC,eAAeiE,WAClCC,EAAgB,oBACpBN,EAAM5C,MAAQ,KAAO4C,EAAM3C,SAAW,OAAS2C,EAAM1C,GADjC,aAEjBpB,EAFiB,QAGtBuC,QAAQC,IAAIxC,EAAWoE,GACvBtE,SAASuE,YAAY,cAAc,EAAOD,KAXhD,SAcGN,EAAMQ,OAZFR,EAAMS,OAiBjB,OACE,sBAAKC,UAAU,MAAf,UACE,wBAAQA,UAAU,aAAlB,mCACA,8BACE,sBACEzB,MAAO,CACLI,QAAS,OACTsB,cAAe,MACfC,WAAY,gBACZC,eAAgB,gBALpB,UAOE,gCACE,cAACd,EAAD,CACEE,QAAS,kBAAML,GAAY,SAACkB,GAAD,OAAWA,GAAQ,GAAKA,EAAOA,EAAO,MACjEN,MAAM,oBACNpD,MAAOA,EACPE,GAAIA,EACJD,SAAUA,EAAW,IAEvB,6BAAKA,IACL,cAAC0C,EAAD,CACEE,QAAS,kBAAML,GAAY,SAACkB,GAAD,OAAWA,GAAQ,EAAIA,EAAOA,EAAO,MAChEN,MAAM,oBACNpD,MAAOA,EACPE,GAAIA,EACJD,SAAUA,EAAW,OAGzB,gCACE,cAAC0C,EAAD,CACES,MAAM,MACNP,QAAS,kBAAMJ,EAAS,QACxBzC,MAAO,MACPE,GAAIA,EACJD,SAAUA,EALZ,iBAQA,cAAC0C,EAAD,CACES,MAAM,OACNP,QAAS,kBAAMJ,EAAS,SACxBzC,MAAO,OACPE,GAAIA,EACJD,SAAUA,EALZ,kBAQA,cAAC0C,EAAD,CACES,MAAM,OACNP,QAAS,kBAAMJ,EAAS,SACxBzC,MAAO,OACPE,GAAIA,EACJD,SAAUA,EALZ,kBAQA,cAAC0C,EAAD,CACES,MAAM,QACNP,QAAS,kBAAMJ,EAAS,UACxBzC,MAAO,QACPE,GAAIA,EACJD,SAAUA,EALZ,mBAQA,qBAAIqD,UAAWtD,EAAf,yBACc,4BAAIA,UAGpB,gCACE,cAAC2C,EAAD,CACES,MAAM,MACNP,QAAS,kBAAMH,EAAM,QACrBxC,GAAI,MACJF,MAAOA,EACPC,SAAUA,EALZ,iBAQA,cAAC0C,EAAD,CACES,MAAM,OACNP,QAAS,kBAAMH,EAAM,SACrBxC,GAAI,OACJF,MAAOA,EACPC,SAAUA,EALZ,kBAQA,cAAC0C,EAAD,CACES,MAAM,OACNP,QAAS,kBAAMH,EAAM,SACrBxC,GAAI,OACJF,MAAOA,EACPC,SAAUA,EALZ,kBAQA,cAAC0C,EAAD,CACES,MAAM,QACNP,QAAS,kBAAMH,EAAM,UACrBxC,GAAI,QACJF,MAAOA,EACPC,SAAUA,EALZ,mBAQA,cAAC0C,EAAD,CACES,MAAM,QACNP,QAAS,kBAAMH,EAAM,UACrBxC,GAAI,QACJF,MAAOA,EACPC,SAAUA,EALZ,mBAQA,qBAAIqD,UAAW,MAAQpD,EAAvB,uBACY,4BAAIA,eAKtB,cAAC,EAAD,CAAQF,MAAOA,EAAOC,SAAUA,EAAUC,GAAIA,QC1IpDyD,IAASC,OAAO,cAAC,EAAD,IAAShF,SAASiF,eAAe,W","file":"static/js/main.8183cbb8.chunk.js","sourcesContent":["import React from 'react';\r\n\r\n// const content = [\r\n//   { text: 'asdfxc', fontSize: 12, color: 'red' },\r\n//   { text: 'wd', fontSize: 14, color: 'dark' },\r\n//   { text: 'cdse', fontSize: 12, color: 'blue' },\r\n//   { text: 'asdfxzc', fontSize: 16, color: 'red' },\r\n//   { text: 's', fontSize: 12, color: 'red' },\r\n// ];\r\n\r\nconst Editor = ({ color, fontSize, bg }) => {\r\n  const editor = React.useRef(null);\r\n  const [input, setInput] = React.useState('');\r\n\r\n  React.useEffect(() => {\r\n    deletEmpty(editor.current);\r\n    let p = document.createElement('p');\r\n    p.classList.add(`${color}`, `f${fontSize}`, `bg-${bg}`);\r\n    p.innerHTML = ' ';\r\n    editor.current.appendChild(p);\r\n    setCaretToEnd(p);\r\n  }, [color, fontSize, bg]);\r\n\r\n  const handleChange = (e) => {\r\n    let t = Array.from(editor.current.children).map((el) => el);\r\n    console.log();\r\n    if (t[0]?.localName === 'font' || t[0]?.localName === 'br') {\r\n      let p = document.createElement('p');\r\n      p.classList.add(`${color}`, `f${fontSize}`, `bg-${bg}`);\r\n      p.innerHTML = ' ';\r\n      editor.current.appendChild(p);\r\n      setCaretToEnd(p);\r\n      editor.current.removeChild(t[0]);\r\n    }\r\n\r\n    if (e.nativeEvent.key === 'Enter') {\r\n      let p = document.createElement('p');\r\n      p.classList.add(`${color}`, `f${fontSize}`, `bg-${bg}`);\r\n      p.innerHTML = ' ';\r\n      editor.current.appendChild(p);\r\n    }\r\n    setInput(e.nativeEvent.key);\r\n  };\r\n\r\n  return (\r\n    <div\r\n      ref={editor}\r\n      contentEditable=\"true\"\r\n      role=\"textbox\"\r\n      spellCheck=\"true\"\r\n      onFocus={(e) => console.log(e)}\r\n      onKeyDown={(e) => handleChange(e)}\r\n      style={{\r\n        border: '2px solid black',\r\n        width: '500px',\r\n        height: '400px',\r\n        display: 'inline-block',\r\n        outline: 'none',\r\n        userSelect: 'text',\r\n        whiteSpace: 'pre-wrap',\r\n        overflowWrap: 'break-word',\r\n        marginLeft: '30%',\r\n      }}></div>\r\n  );\r\n};\r\n\r\n// function attachSelectionListener(element) {\r\n//   if (!element.contentEditable) {\r\n//     return;\r\n//   }\r\n//   element.onselectstart = () => handleSelectionChange(element);\r\n// }\r\n\r\n// function handleSelectionChange(element) {\r\n//   document.onmouseup = () => retrieveSelection(element);\r\n//   document.onkeyup = () => retrieveSelection(element);\r\n// }\r\n\r\n// function retrieveSelection(element) {\r\n//   const selection = document.getSelection();\r\n\r\n//   // Ignore empty selection\r\n//   if (!selection || !selection.toString()) {\r\n//     return;\r\n//   }\r\n//   console.log(selection.toString());\r\n// }\r\n\r\nconst setCaretToEnd = (element) => {\r\n  const range = document.createRange();\r\n  const selection = window.getSelection();\r\n  range.selectNodeContents(element);\r\n  range.collapse(false);\r\n  selection.removeAllRanges();\r\n  selection.addRange(range);\r\n  element.focus();\r\n};\r\n\r\nconst deletEmpty = (div) => {\r\n  Array.from(div.children).map((el) =>\r\n    el.innerHTML === ' ' || el.innerHTML === '' ? div.removeChild(el) : el,\r\n  );\r\n};\r\n\r\nexport default Editor;\r\n","import React from 'react';\nimport Editor from './Editor';\nimport './styles.css';\n\nfunction App() {\n  const [fontSize, setFontSize] = React.useState(14);\n  const [color, setColor] = React.useState('black');\n  const [bg, setBg] = React.useState('white');\n\n  const EditButton = (props) => {\n    return (\n      <button\n        onClick={props.onClick}\n        key={props.name}\n        onMouseDown={(evt) => {\n          evt.preventDefault();\n          if (props.color && props.fontSize) {\n            const selection = window.getSelection().toString();\n            const wrappedselection = `<p class=\"${\n              props.color + ' f' + props.fontSize + ' bg-' + props.bg\n            }\">${selection}</p>`;\n            console.log(selection, wrappedselection);\n            document.execCommand('insertHTML', false, wrappedselection);\n          }\n        }}>\n        {props.label}\n      </button>\n    );\n  };\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">Rich Text Redemy Task</header>\n      <nav>\n        <div\n          style={{\n            display: 'flex',\n            flexDirection: 'row',\n            alignItems: 'space-between',\n            justifyContent: 'space-around',\n          }}>\n          <div>\n            <EditButton\n              onClick={() => setFontSize((prev) => (prev >= 20 ? prev : prev + 2))}\n              label=\"Increase fontsize\"\n              color={color}\n              bg={bg}\n              fontSize={fontSize + 2}\n            />\n            <h2>{fontSize}</h2>\n            <EditButton\n              onClick={() => setFontSize((prev) => (prev <= 8 ? prev : prev - 2))}\n              label=\"Decrease fontsize\"\n              color={color}\n              bg={bg}\n              fontSize={fontSize - 2}\n            />\n          </div>\n          <div>\n            <EditButton\n              label=\"Red\"\n              onClick={() => setColor('red')}\n              color={'red'}\n              bg={bg}\n              fontSize={fontSize}>\n              Red\n            </EditButton>\n            <EditButton\n              label=\"blue\"\n              onClick={() => setColor('blue')}\n              color={'blue'}\n              bg={bg}\n              fontSize={fontSize}>\n              blue\n            </EditButton>\n            <EditButton\n              label=\"pink\"\n              onClick={() => setColor('pink')}\n              color={'pink'}\n              bg={bg}\n              fontSize={fontSize}>\n              pink\n            </EditButton>\n            <EditButton\n              label=\"green\"\n              onClick={() => setColor('green')}\n              color={'green'}\n              bg={bg}\n              fontSize={fontSize}>\n              green\n            </EditButton>\n            <h2 className={color}>\n              Text color: <b>{color}</b>\n            </h2>\n          </div>\n          <div>\n            <EditButton\n              label=\"Red\"\n              onClick={() => setBg('red')}\n              bg={'red'}\n              color={color}\n              fontSize={fontSize}>\n              Red\n            </EditButton>\n            <EditButton\n              label=\"blue\"\n              onClick={() => setBg('blue')}\n              bg={'blue'}\n              color={color}\n              fontSize={fontSize}>\n              blue\n            </EditButton>\n            <EditButton\n              label=\"pink\"\n              onClick={() => setBg('pink')}\n              bg={'pink'}\n              color={color}\n              fontSize={fontSize}>\n              pink\n            </EditButton>\n            <EditButton\n              label=\"green\"\n              onClick={() => setBg('green')}\n              bg={'green'}\n              color={color}\n              fontSize={fontSize}>\n              green\n            </EditButton>\n            <EditButton\n              label=\"white\"\n              onClick={() => setBg('white')}\n              bg={'white'}\n              color={color}\n              fontSize={fontSize}>\n              white\n            </EditButton>\n            <h2 className={'bg-' + bg}>\n              Bg color: <b>{bg}</b>\n            </h2>\n          </div>\n        </div>\n      </nav>\n      <Editor color={color} fontSize={fontSize} bg={bg} />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}